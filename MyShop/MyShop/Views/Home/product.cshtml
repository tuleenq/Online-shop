@{
    ViewData["Title"] = "Product";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .review-item {
        background-color: #fff;
        padding: 15px;
        margin-bottom: 15px;
        border: 1px solid #eee;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        font-family: 'Arial', sans-serif;
    }

        .review-item strong {
            font-size: 1.2em;
            color: #333;
        }

        .review-item p {
            font-size: 1em;
            color: #555;
            margin-top: 5px;
        }

    /* Hover effect for the Add Review button */
    #add-review-button:hover {
        background-color: #a50000;
    }

    .spinner-container {
        position: fixed;
        top: 70%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: none;
        z-index: 9999;
    }
</style>
<div id="loading-spinner-container" class="spinner-container">
    <div class="spinner-border text-danger" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
<div class="container">
    
    <!-- Left Section: Product Images -->
    <div class="left">
        <div id="product-images">
            <!-- Images will be dynamically loaded here -->
        </div>
    </div>


    <!-- Right Section: Product Details -->
    <div class="right">
        <h1 id="product-name">Product Name</h1>
        <p id="product-price">Price</p>
        <p id="product-stock-quantity">Stock Quantity</p>
        <div class="quantity-control" style="margin-top: 15px; margin-bottom: 20px;">
            <!-- Added margin-bottom for spacing -->
            <label for="quantity" style="font-weight: bold; margin-bottom: 5px; display: block;">Quantity:</label>
            <div style="display: flex; align-items: center; border: 1px solid #ccc; width: max-content; border-radius: 5px; overflow: hidden;">
                <button id="decrease-quantity" class="btn"
                        style="border: none; background: #f7f7f7; padding: 5px 10px; cursor: pointer; font-size: 16px;">
                    
                </button>
                <input type="number" id="quantity" value="1" min="1" readonly
                       style="width: 40px; text-align: center; border: none; outline: none;">
                <button id="increase-quantity" class="btn"
                        style="border: none; background: #f7f7f7; padding: 5px 10px; cursor: pointer; font-size: 16px;">
                    +
                </button>
            </div>
        </div>
        <button id="add-to-cart" disabled>Sold Out</button>

        <div id="reviews-section" style="margin-top: 20px; border-top: 1px solid #ccc; padding-top: 20px;">
            <h3 style="font-size: 1.5em; font-weight: bold;">Reviews:</h3>
            <div id="reviews-list" style="margin-top: 10px;">
                <!-- Reviews will be dynamically populated here -->
            </div>
        </div>

        <!-- Add Review Section -->
        <div class="add-review" style="margin-top: 20px; background-color: #f9f9f9; padding: 20px; border-radius: 8px;">
            <h3 style="font-size: 1.5em; font-weight: bold;">Add Your Review:</h3>
            <textarea id="review-input" rows="4" placeholder="Write your review here..."
                      style="width: 100%; border: 1px solid #ccc; border-radius: 5px; padding: 10px; font-size: 1em; resize: vertical;">
    </textarea>
            <button id="add-review-button"
                    style="margin-top: 10px; background-color: #8b0000; color: #fff; padding: 12px 18px; border: none; border-radius: 5px; cursor: pointer; font-size: 1.1em; transition: background-color 0.3s;">
                Add Review
            </button>
        </div>

    </div>
</div>

<!-- Bottom Section: Product Description -->
<div class="description">
    <h2>Description</h2>
    <p id="product-description">Description will be dynamically loaded here.</p>
</div>

<div class="features-section py-4 bg-light">
    <div class="row text-center">
        <div class="col-md-3">
            <img src="~/Images/box.png" alt="Same Day Delivery" class="mb-sm-1" style="width: 40px; height: 40px;">
            <h5>Same Day/Next Day Delivery</h5>
            <p>Next day delivery on most orders in Jordan - Same day available</p>
        </div>
        <div class="col-md-3">
            <img src="~/Images/shopping-cart.png" alt="Biggest Selection" class="mb-2" style="width: 40px; height: 40px;">
            <h5>Biggest Selection</h5>
            <p>Largest collection of any store in MENA</p>
        </div>
        <div class="col-md-3">
            <img src="~/Images/user-talking-with-speech-bubble.png" alt="Top-notch Support" class="mb-2" style="width: 40px; height: 40px;">
            <h5>Top-notch Support</h5>
            <p>We are always happy to help in any way we can</p>
        </div>
        <div class="col-md-3">
            <img src="~/Images/secure-payment.png" alt="Secure Payments" class="mb-2" style="width: 40px; height: 40px;">
            <h5>Secure Payments</h5>
            <p>Cash on Delivery available</p>
        </div>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", async function () {
        let selectedQuantity = 1; // Initialize the selected quantity
        
        let productStock = 0;
        // Extract product name from query parameters
        const urlParams = new URLSearchParams(window.location.search);
        const productName = urlParams.get("name");

        if (!productName) {
            alert("No product name provided.");
            return;
        }

        try {
            // Fetch product reviews
            const reviewsResponse = await fetch(`https://localhost:7298/api/Products/reviews/${encodeURIComponent(productName)}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                },
            });

            if (!reviewsResponse.ok) {
                throw new Error("Failed to fetch reviews.");
            }

            const reviews = await reviewsResponse.json();

            // Populate reviews section
            const reviewsList = document.getElementById("reviews-list");

            if (reviews.length === 0) {
                reviewsList.innerHTML = "<p>No reviews available for this product.</p>";
                return;
            }

            reviews.forEach(review => {
                const reviewItem = document.createElement("div");
                reviewItem.classList.add("review-item");
                reviewItem.innerHTML = `<strong>${review.userName}</strong>: <p>${review.reviewText}</p>`;
                reviewsList.appendChild(reviewItem);
            });
        } catch (error) {
            console.error("Error fetching reviews:", error);
            
        }


        try {
            // Fetch product details
            const response = await fetch("https://localhost:7298/api/Products/GetProductByName", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ Name: productName }),
            });
            document.getElementById('loading-spinner-container').style.display = 'block';

            if (!response.ok) {
                throw new Error("Failed to fetch product details.");
            }

            const product = await response.json();
            productStock = product.stockQuantity;
            // Populate the product details on the page
            const productNameElement = document.getElementById("product-name");
            const productPriceElement = document.getElementById("product-price");
            const productStockQuantityElement = document.getElementById("product-stock-quantity");
            const addToCartButton = document.getElementById("add-to-cart");
            addToCartButton.disabled = !(productStock > 0);
            addToCartButton.textContent = productStock > 0 ? "Add to Cart" : "Sold Out";
            const productDescriptionElement = document.getElementById("product-description");
            const productImagesContainer = document.getElementById("product-images");

            // Safely update the product details on the page
            if (productNameElement) productNameElement.textContent = product.name || "Unknown Product";
            if (productPriceElement) {
                productPriceElement.textContent =
                    typeof product.price === "number" ? `Price: $${product.price.toFixed(2)}` : "Price: Not Available";
            }
            if (productStockQuantityElement) {
                productStockQuantityElement.textContent =
                    typeof product.stockQuantity === "number" ? `Stock Quantity: ${product.stockQuantity}` : "Stock Quantity: Not Available";
            }
            if (addToCartButton) {
                addToCartButton.textContent = product.stockQuantity > 0 ? "Add to Cart" : "Sold Out";
                addToCartButton.disabled = !(product.stockQuantity > 0);
            }
            if (productDescriptionElement) {
                productDescriptionElement.textContent = product.description || "No description available.";
            }

            // Handle product image if available
            if (product.imageData && productImagesContainer) {
                const img = document.createElement("img");
                img.src = `data:image/jpeg;base64,${product.imageData}`;
                img.alt = product.name || "Product Image";
                img.style.maxWidth = "100%";
                productImagesContainer.appendChild(img);
            }

            // Handle quantity increase and decrease
            document.getElementById("increase-quantity").addEventListener("click", function () {
                if (selectedQuantity < productStock) {
                    selectedQuantity++;
                    document.getElementById("quantity").value = selectedQuantity;
                } else {
                    alert("You cannot select more than the available stock.");
                }
            });

            // Handle quantity decrease
            document.getElementById("decrease-quantity").addEventListener("click", function () {
                if (selectedQuantity > 1) {
                    selectedQuantity--;
                    document.getElementById("quantity").value = selectedQuantity;
                }
            });

            // Add to Cart button event listener
            addToCartButton.addEventListener("click", async function () {
                if (selectedQuantity > productStock) {
                    alert("The selected quantity exceeds available stock.");
                    return;
                }
                // Get the token from session
                const userInfo = JSON.parse(localStorage.getItem("userInfo"));
                if (!userInfo || !userInfo.token) {
                    alert("You must be logged in to add products to the cart.");
                    return;
                }

                const token = userInfo.token; // Retrieve the token
                const userId = userInfo.user.id; // Retrieve the user ID (if available)

                // // Ensure the token and user ID are valid
                // if (!token || !userId) {
                //     alert("User session has expired. Please log in again.");
                //     return;
                // }
                debugger
                try {
                    // Make API call to add the selected quantity to the cart
                    const cartResponse = await fetch("https://localhost:7298/api/ShoppingCart/add", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": `Bearer ${token}`, // Include token in the Authorization header
                        },
                        body: JSON.stringify({
                            UserId: userId,
                            ProductName: productName,
                            Quantity: selectedQuantity,
                        }),
                    });

                    if (cartResponse.ok) {
                        
                    } else {
                        alert("Failed to add product to cart.");
                    }
                } catch (error) {
                    console.error("Error adding product to cart:", error);
                    alert("An error occurred while adding the product to the cart.");
                }
            });

            
            document.getElementById("add-review-button").addEventListener("click", async function () {
                // Get the review text from the input field
                const review = document.getElementById("review-input").value;
                // Ensure that the review text is not empty
                if (!review) {
                    alert("Please enter a review.");
                    return;
                }

                // Get the user information from local storage
                const userInfo = JSON.parse(localStorage.getItem("userInfo"));
                if (!userInfo || !userInfo.user.id) {
                    alert("You must be logged in to add a review.");
                    return;
                }

                const userId = userInfo.user.id; // Get the user ID from the stored user info

                // Get the product name from the URL query parameters
                const urlParams = new URLSearchParams(window.location.search);
                const productName = urlParams.get("name");
                if (!productName) {
                    alert("No product name provided.");
                    return;
                }

                try {
                    // Call the API to create the review
                    const response = await fetch("https://localhost:7298/api/Products/create-review", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            UserId: userId,           // Pass user ID
                            ProductName: productName, // Pass product name
                            ReviewText: review    // Pass review text
                        }),
                    });

                    // Check if the response is successful
                    if (!response.ok) {
                        throw new Error("Failed to add review.");
                    }

                    // Parse the response from the API
                    const { userName, reviewText } = await response.json();

                    // Dynamically add the review to the page
                    const reviewsList = document.getElementById("reviews-list");
                    const reviewItem = document.createElement("div");
                    reviewItem.classList.add("review-item");
                    reviewItem.innerHTML = `<strong>${userName}</strong>: <p>${reviewText}</p>`;
                    reviewsList.appendChild(reviewItem);

                    // Clear the review input field
                    document.getElementById("review-input").value = "";

                   
                } catch (error) {
                    console.error("Error adding review:", error);
                    alert("An error occurred while submitting your review.");
                }
            });



        } catch (error) {
            console.error("Error fetching product details:", error);
            alert("An error occurred while loading the product details.");
        } finally {
            // Hide loading spinner after fetching and products are loaded
            document.getElementById('loading-spinner-container').style.display = 'none';
        }
    });


   
  
      

</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.js"></script>


